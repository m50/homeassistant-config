#################################################
#                     BASE                      #
#################################################

base:
  variables:
    state: >
      [[[ return entity === undefined || entity.state; ]]]
    timeout: >
      [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
    consider_on: >
      [[[ return ['on', 'home', 'cool', 'fan_only', 'playing', 'open'].indexOf(entity === undefined || entity.state) !== -1; ]]]
  aspect_ratio: 1/1
  show_state: false
  show_icon: false
  tap_action:
    action: toggle
    haptic: medium
  hold_action:
    action: more-info
  styles:
    grid:
      - grid-template-areas: |
          "icon  circle"
          "n     n"
          "sw    sw"
      - grid-template-columns: repeat(2, 1fr)
      - grid-template-rows: auto repeat(2, min-content)
      - gap: 0.5rem
      - align-items: start
    name:
      - justify-self: start
      - line-height: 115%
    state:
      - justify-self: start
      - line-height: 115%
    card:
      - border-radius: var(--ha-card-border-radius)
      - -webkit-tap-highlight-color: rgba(0,0,0,0)
      - transition: none
      - padding: 10%
      - box-shadow: >
          [[[
            return variables.consider_on ?
              'var(--ha-card-box-shadow-active)' :
              'var(--ha-card-box-shadow)';
          ]]]
      - --mdc-ripple-color: >
          [[[
            return variables.consider_on ?
              'rgb(0, 0, 0)' :
              'rgba(255, 255, 255, 0.3)';
          ]]]
      - color: >
          [[[
            return variables.consider_on ?
              'var(--text-primary-color)' :
              'var(--primary-text-color)';
          ]]]
      - background-color: >
          [[[
            return variables.consider_on ?
              'var(--primary-color)' :
              '#fff';
          ]]]
  extra_styles: |
    #container {
      text-align: left !important;
    }
    #name, #state {
      font-size: 0.8vw;
      letter-spacing: 0.05vw;
    }
    /* portrait */
    @media screen and (max-width: 1200px) {
      #name, #state {
        font-size: 2vw;
        letter-spacing: 0.05vw;
      }
    }
    /* phone */
    @media screen and (max-width: 800px) {
      #name, #state {
        font-size: 3.1vw;
        letter-spacing: 0.12vw;
      }
    }

#################################################
#                    CIRCLE                     #
#################################################

circle:
  custom_fields:
    circle: >
      [[[
        if (variables.state === 'on') {
          const input = variables.circle_input;
          const radius = 20.5;
          const circumference = radius * 2 * Math.PI;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                circle {
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - input / 100 * circumference};
                }
                tspan {
                  font-size: 10px;
                }
              </style>
              <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
            </svg>
          `;
        }
      ]]]
  styles:
    custom_fields:
      circle:
        - display: initial
        - width: 90%
        - letter-spacing: 0.03vw
        - margin: -6% -6% 0 0
        - justify-self: end

#################################################
#                    LOADER                     #
#################################################

loader:
  custom_fields:
    loader: >
      <img src="/local/loader.svg" width="100%">
  tap_action:
    loader: >
      [[[
        if (entity) {
          let elt = this.shadowRoot;
          const loader = (id, style, timeout) => {
            if (elt.getElementById(id)) {
              elt.getElementById(id).style.display = style;
              window.setTimeout(() => elt.getElementById(id).style.display = timeout, 20000);
            }
          };
          loader('circle', 'none', 'initial'),
          loader('loader', 'initial', 'none');
        }
      ]]]
  styles:
    custom_fields:
      loader:
        - display: none
        - top: 3%
        - left: 60%
        - width: 37%
        - position: absolute
        - filter: >
            [[[ return !variables.consider_on ? 'none' : 'invert(1)'; ]]]

#################################################
#                     LIGHT                     #
#################################################

light:
  tap_action:
    action: toggle
    haptic: medium
  template:
    - base
    - circle
    - loader
    - icon_entity
    - toggle_icon
  variables:
    circle_input: >
      [[[ return entity === undefined || Math.round(entity.attributes.brightness / 2.54); ]]]

#################################################
#                     SWITCH                    #
#################################################

switch:
  tap_action:
    action: toggle
    haptic: medium
  template:
    - base
    - loader
    - icon_entity
    - toggle_icon

#################################################
#                     BLIND                     #
#################################################

blind:
  tap_action:
    action: toggle
    haptic: medium
  template:
    - base
    - circle
    - loader
    - icon_entity
    - toggle_icon
  variables:
    circle_input: >
      [[[ return entity === undefined || Math.round(entity.attributes.current_position); ]]]

#################################################
#                     Scene                     #
#################################################

scene:
  template:
    - base
    - icon_entity
  custom_fields:
    sw: >
      <ha-icon icon="mdi:presentation"></ha-icon>
  styles:
    custom_fields:
      sw:
        - display: initial
        - width: 20%
        - letter-spacing: 0.03vw
        - justify-self: start
  haptic: medium
  tap_action:
    action: call-service
    service: scene.turn_on
    service_data:
      entity_id: >
        [[[ return entity.entity_id; ]]]

#################################################
#                     ICONS                     #
#################################################

toggle_icon:
  custom_fields:
    sw: >
      [[[
        const icon = variables.consider_on ? 'mdi:toggle-switch' : 'mdi:toggle-switch-off-outline';
        const color = variables.consider_on ? 'var(--accent-color)' : 'var(--primary-text-color)';
        const dir = variables.consider_on ? 'row-reverse' : 'row';
        const styles = `
          --switch-size: 1em;
          color: ${color};
          height: var(--switch-size);
          width: 50%;
          border-radius: var(--switch-size);
          border: 2px solid ${color};
          display: flex;
          flex-direction: ${dir};
          align-content: center;
          align-items: center;
          justify-content: space-between;
          padding: 2px;
        `.replace(/\n/g, ' ');

        const ballStyles = `
          border-radius: var(--switch-size);
          width: 50%;
          height: var(--switch-size);
          background: ${color}
        `.replace(/\n/g, ' ');

        const textStyles = `
          padding: 0 4px;
          color: ${variables.consider_on ? 'var(--accent-color)' : 'var(--secondary-text-color)'};
        `.replace(/\n/g, ' ');

        return `
          <div style="${styles}">
            <div style="${ballStyles}">&nbsp;</div>
            <div style="${textStyles}">${variables.consider_on ? 'On' : 'Off'}</div>
          </div>
        `;
      ]]]

icon_entity:
  custom_fields:
    icon: >
      [[[
        let lightColor = 'var(--light-primary-color);'
        let brightness = 100;
        if (entity?.attributes?.rgb_color) {
          const [r, g, b] = entity.attributes.rgb_color;
          lightColor = `rgb(${r}, ${g}, ${b})`;
        }
        if (entity?.attributes?.brightness) {
          const b_max = 99;
          const b_min = 40;
          brightness = entity.attributes.brightness / 2.54 * (b_max - b_min)  / 100 + b_min;
        }

        let color = 'var(--state-icon-color)';
        if (variables.consider_on) {
          if (entity.attributes.brightness != undefined) {
            color = lightColor;
          } else if (entity.attributes.brightness == undefined) {
            color = 'var(--state-icon-active-color)';
          }
        }

        const style = `
          color: ${color};
          filter: brightness(${brightness}%);
        `;

        return `<ha-icon icon="${entity.attributes.icon}" style="${style.replace(/\n/g, ' ')}"></ha-icon>`;
      ]]]
